import { compareNodes, isSome } from '@graphql-tools/utils';
export function mergeArguments(args1, args2, config) {
<<<<<<< HEAD
    const result = deduplicateArguments([...args2, ...args1].filter(isSome));
=======
    const result = deduplicateArguments([...args2, ...args1].filter(isSome), config);
>>>>>>> f21af465 (NEW CHANGES)
    if (config && config.sort) {
        result.sort(compareNodes);
    }
    return result;
}
<<<<<<< HEAD
function deduplicateArguments(args) {
    return args.reduce((acc, current) => {
        const dup = acc.find(arg => arg.name.value === current.name.value);
        if (!dup) {
            return acc.concat([current]);
        }
=======
function deduplicateArguments(args, config) {
    return args.reduce((acc, current) => {
        const dupIndex = acc.findIndex(arg => arg.name.value === current.name.value);
        if (dupIndex === -1) {
            return acc.concat([current]);
        }
        else if (!(config === null || config === void 0 ? void 0 : config.reverseArguments)) {
            acc[dupIndex] = current;
        }
>>>>>>> f21af465 (NEW CHANGES)
        return acc;
    }, []);
}
